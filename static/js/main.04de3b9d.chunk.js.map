{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/Whitelist.jsx","components/Proposals.jsx","components/Workflow.jsx","components/Header.jsx","components/AppBtn.jsx","components/hook/useModal.js","components/modal.js","components/EventWatcher.jsx","components/Vote.jsx","components/Result.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","abi","address","networks","Contract","err","console","error","isOwner","methods","owner","call","useEffect","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","Whitelist","currentState","voters","checkVoterState","useState","newVoterInput","setNewVoterInput","addToWhitelist","includes","addVoter","send","from","className","map","voter","index","placeholder","onChange","target","onClick","Proposals","proposals","newProposalInput","setNewProposalInput","registerProposal","addProposal","proposalBoard","proposal","id","description","voteCount","voterInput","Workflow","statusList","nextStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","nextButton","Header","isVoter","userAddress","setUserAddress","logo","width","height","viewBox","fill","xmlns","rx","d","AppBtn","show","getText","useModal","isShowing","setIsShowing","toggle","Modal","hide","title","props","ReactDOM","createPortal","document","body","EventWatcher","changeState","addToProposalList","addToVoteList","setVoterStatus","setVotedStatus","votes","isInit","setIsInit","refreshEvents","getPastEvents","fromBlock","toBlock","status","length","mostRecent","returnValues","newStatus","parseInt","listVoter","formattedVoterList","voterAddress","voterStatus","proposalId","vote","addVote","statusNb","getOneProposal","liveCount","WorkflowStatusChange","subscriptionId","log","event","VoterRegistered","ProposalRegistered","Voted","Vote","alreadyVoted","setVotedState","voteInput","setVoteInput","sendVote","setVote","name","Result","winnerId","setWinnerId","updateWinnerId","winningProposalID","blockquote","App","workflowState","setWorkflowState","setIsVoter","hasVoted","setHasVoted","voterList","setVoterList","proposalList","setProposalList","voteList","setVoteList","isVoterListVisible","toggleVoterList","areProposalsVisible","toggleProposals","isVotingVisible","toggleVoting","isResultVisible","toggleResult","addNewVoter","updateVoters","i","newAdress","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.04de3b9d.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        // Checking if the user is the owner\n        let isOwner = false;\n        const owner = await contract.methods.owner().call();\n        if(owner === accounts[0]) {\n          isOwner = true;\n        }\n        // Getting the contract's blockNumber\n        // let txBlock = await web3.eth.getTransaction(txHash);\n\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract, isOwner }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/Voting.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","import { useState } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction Whitelist({ currentState, voters, checkVoterState}) {\n    const [newVoterInput, setNewVoterInput] = useState(\"\");\n    const { state: { contract, accounts, isOwner } } = useEth();\n\n    const handleVoterInputChange = e => {\n        setNewVoterInput(e.target.value)\n    }\n\n    // Adds a voter to the Whitelist if new\n    const addToWhitelist = async e => {\n        if(voters.includes(newVoterInput)){\n            return;\n        }\n        await contract.methods.addVoter(newVoterInput).send({ from: accounts[0] });\n    }\n\n    return(\n        <div className=\"whitelistContainer\">\n            <div className=\"voterList\">\n                <table>\n                    <tbody>\n                        {\n                            voters.map((voter, index) => {\n                                return (<tr key={index}><td>{voter}</td></tr>);\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n            {isOwner && currentState === 0\n                ? <div className=\"voteInput\">\n                    <input type='text' placeholder=\"Ajouter une adresse en tant que voteur\"\n                        value={newVoterInput} onChange={handleVoterInputChange} />\n                    <button onClick={addToWhitelist}>Ajouter à la whitelist</button>\n                 </div>\n                : ''\n            }\n            {isOwner && currentState > 0\n                ? <div className=\"closedItemInformation\">\n                        Les enregistrements sont fermés\n                  </div>\n                : ''\n            }\n        </div>\n    );\n}\n\nexport default Whitelist;","import { useState } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction Proposals({ currentState, proposals }) {\n    const [newProposalInput, setNewProposalInput] = useState(\"\");\n    const { state: { contract, accounts } } = useEth();\n\n    const handleNewProposalChange = e => {\n        setNewProposalInput(e.target.value)\n    }\n\n    const registerProposal = async () => {\n        await contract.methods.addProposal(newProposalInput).send({ from: accounts[0] });\n    }\n\n    let proposalBoard = (\n        <div className=\"tableContainer\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Numéro</th>\n                        <th>Description</th>\n                        <th>Nombre de vote</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        proposals.map((proposal, index) => {\n                            return (<tr key={index}><td>{proposal.id}</td><td>{proposal.description}</td><td>{proposal.voteCount}</td></tr>);\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n\n    let voterInput = (\n        <div className=\"voteInput\">\n            <input type='text' placeholder=\"Détails de la proposition\"\n                value={newProposalInput} onChange={handleNewProposalChange} />\n            <button onClick={registerProposal}>Ajouter</button>\n        </div>\n    );\n\n    if(currentState > 1)\n    {\n        voterInput = (\n            <div className=\"closedItemInformation\">\n                Les enregistrements sont fermés\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"proposalContainer\">\n            {proposalBoard}\n            {voterInput}\n        </div>\n    )\n}\n\nexport default Proposals;","import useEth from \"../contexts/EthContext/useEth\";\nimport {IoPlaySkipForward, IoMap} from \"react-icons/io5\";\n\nfunction Workflow({currentState}) {\n    const { state: { contract, accounts, isOwner } } = useEth();\n\n    const statusList = [\n        \"Enregistrement des voteurs\",\n        \"Enregistrement des propositions\",\n        \"Fin de l'enregistrement des propositions\",\n        \"Votes ouverts\",\n        \"Votes fermés\",\n        \"Résultats disponibles\"\n    ]\n    \n\n    const nextStatus = async () => {\n        switch(currentState){\n            case 0:\n                await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n                break;\n            case 1:\n                await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n                break;\n            case 2:\n                await contract.methods.startVotingSession().send({ from: accounts[0] });\n                break;\n            case 3:\n                await contract.methods.endVotingSession().send({ from: accounts[0] });\n                break;\n            case 4:\n                await contract.methods.tallyVotes().send({ from: accounts[0] });\n                break;\n            default: break;\n        }\n    }\n\n    // The button will disappear at the end of the workflow\n    let nextButton = (\n        <button onClick={nextStatus}>\n            <div>\n                {<IoPlaySkipForward />}\n            </div>\n            {statusList[currentState+1]}\n            \n        </button>\n    );\n    if (currentState >= 5)\n    {\n        nextButton = (<></>);\n    }\n\n    // Admin view\n    if (isOwner) {\n        return (\n            <div className=\"workflowContainer\">\n                <div className=\"currentStateText\">\n                    <div>\n                        {<IoMap />}\n                    </div>\n                    {statusList[currentState]}\n                </div>\n                {nextButton}                \n            </div>\n        );\n    }\n\n    return (\n        <div className=\"workflowContainer\">\n            <div className=\"currentStateText\">\n                    <div>\n                        {<IoMap />}\n                    </div>\n                    {statusList[currentState]}\n            </div>\n        </div>\n    );\n}\n\nexport default Workflow;","import { useEffect, useState } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction Header({isVoter}) {\n    const { state: { accounts, isOwner } } = useEth();\n    const [userAddress, setUserAddress] = useState(\"\");\n\n    \n\n    useEffect(() => {\n        const updateUserAddress = () => {\n            if(accounts !== null) {\n                setUserAddress(accounts[0]);\n            }        \n        }\n\n        updateUserAddress();        \n    }, [accounts]);\n\n    const logo = (<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 215 41\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect width=\"45.6061\" height=\"41\" rx=\"14\" fill=\"#232323\"/>\n    <path d=\"M5.625 29.1286H1.58523V16.0377H5.80398C7.07386 16.0377 8.16051 16.2997 9.06392 16.8239C9.96733 17.3438 10.6598 18.0916 11.1413 19.0675C11.6229 20.0391 11.8636 21.2024 11.8636 22.5575C11.8636 23.9212 11.6207 25.0952 11.1349 26.0796C10.6491 27.0597 9.94176 27.8139 9.01278 28.3423C8.08381 28.8665 6.95455 29.1286 5.625 29.1286ZM3.17045 27.7223H5.52273C6.60511 27.7223 7.50213 27.5135 8.21378 27.0959C8.92543 26.6783 9.45597 26.0838 9.8054 25.3125C10.1548 24.5412 10.3295 23.6229 10.3295 22.5575C10.3295 21.5007 10.157 20.5909 9.81179 19.8281C9.46662 19.0611 8.95099 18.473 8.26491 18.0639C7.57884 17.6506 6.72443 17.4439 5.7017 17.4439H3.17045V27.7223ZM18.4347 29.3331C17.4886 29.3331 16.6726 29.1243 15.9865 28.7067C15.3047 28.2848 14.7784 27.6968 14.4077 26.9425C14.0412 26.184 13.858 25.3019 13.858 24.2962C13.858 23.2905 14.0412 22.4041 14.4077 21.6371C14.7784 20.8658 15.294 20.2649 15.9545 19.8345C16.6193 19.3999 17.3949 19.1825 18.2812 19.1825C18.7926 19.1825 19.2976 19.2678 19.7962 19.4382C20.2947 19.6087 20.7486 19.8857 21.1577 20.2692C21.5668 20.6485 21.8928 21.1513 22.1357 21.7777C22.3786 22.4041 22.5 23.1754 22.5 24.0916V24.7308H14.9318V23.4269H20.9659C20.9659 22.8729 20.8551 22.3786 20.6335 21.9439C20.4162 21.5093 20.1051 21.1662 19.7003 20.9148C19.2997 20.6634 18.8267 20.5377 18.2812 20.5377C17.6804 20.5377 17.1605 20.6868 16.7216 20.9851C16.2869 21.2791 15.9524 21.6627 15.718 22.1357C15.4837 22.6087 15.3665 23.1158 15.3665 23.657V24.5263C15.3665 25.2678 15.4943 25.8963 15.75 26.412C16.0099 26.9233 16.37 27.3132 16.8303 27.5817C17.2905 27.8459 17.8253 27.978 18.4347 27.978C18.831 27.978 19.1889 27.9226 19.5085 27.8118C19.8324 27.6968 20.1115 27.5263 20.3459 27.3004C20.5803 27.0703 20.7614 26.7848 20.8892 26.4439L22.3466 26.853C22.1932 27.3473 21.9354 27.782 21.5732 28.157C21.2109 28.5277 20.7635 28.8175 20.2308 29.0263C19.6982 29.2308 19.0994 29.3331 18.4347 29.3331ZM24.6222 16.0377L28.5085 27.0575H28.6619L32.5483 16.0377H34.2102L29.4034 29.1286H27.767L22.9602 16.0377H24.6222ZM39.1193 29.3331C38.233 29.3331 37.4553 29.1222 36.7862 28.7003C36.1214 28.2784 35.6016 27.6882 35.2266 26.9297C34.8558 26.1712 34.6705 25.2848 34.6705 24.2706C34.6705 23.2479 34.8558 22.3551 35.2266 21.5923C35.6016 20.8296 36.1214 20.2372 36.7862 19.8154C37.4553 19.3935 38.233 19.1825 39.1193 19.1825C40.0057 19.1825 40.7813 19.3935 41.446 19.8154C42.1151 20.2372 42.6349 20.8296 43.0057 21.5923C43.3807 22.3551 43.5682 23.2479 43.5682 24.2706C43.5682 25.2848 43.3807 26.1712 43.0057 26.9297C42.6349 27.6882 42.1151 28.2784 41.446 28.7003C40.7813 29.1222 40.0057 29.3331 39.1193 29.3331ZM39.1193 27.978C39.7926 27.978 40.3466 27.8054 40.7812 27.4602C41.2159 27.1151 41.5376 26.6612 41.7464 26.0987C41.9553 25.5362 42.0597 24.9269 42.0597 24.2706C42.0597 23.6144 41.9553 23.0029 41.7464 22.4361C41.5376 21.8693 41.2159 21.4112 40.7812 21.0618C40.3466 20.7124 39.7926 20.5377 39.1193 20.5377C38.446 20.5377 37.892 20.7124 37.4574 21.0618C37.0227 21.4112 36.701 21.8693 36.4922 22.4361C36.2834 23.0029 36.179 23.6144 36.179 24.2706C36.179 24.9269 36.2834 25.5362 36.4922 26.0987C36.701 26.6612 37.0227 27.1151 37.4574 27.4602C37.892 27.8054 38.446 27.978 39.1193 27.978Z\" fill=\"white\"/>\n    <path d=\"M51.9081 19.3104V20.5888H46.8201V19.3104H51.9081ZM48.303 16.9581H49.8115V26.3161C49.8115 26.7422 49.8733 27.0618 49.9969 27.2749C50.1248 27.4837 50.2867 27.6243 50.4827 27.6968C50.683 27.7649 50.8939 27.799 51.1155 27.799C51.2817 27.799 51.4181 27.7905 51.5246 27.7735C51.6311 27.7522 51.7164 27.7351 51.7803 27.7223L52.0871 29.0774C51.9848 29.1158 51.8421 29.1541 51.6588 29.1925C51.4756 29.2351 51.2434 29.2564 50.9621 29.2564C50.536 29.2564 50.1184 29.1648 49.7093 28.9816C49.3044 28.7983 48.9678 28.5192 48.6993 28.1442C48.4351 27.7692 48.303 27.2962 48.303 26.7252V16.9581ZM58.1883 29.3331C57.2423 29.3331 56.4262 29.1243 55.7402 28.7067C55.0583 28.2848 54.5321 27.6968 54.1613 26.9425C53.7949 26.184 53.6116 25.3019 53.6116 24.2962C53.6116 23.2905 53.7949 22.4041 54.1613 21.6371C54.5321 20.8658 55.0477 20.2649 55.7082 19.8345C56.373 19.3999 57.1485 19.1825 58.0349 19.1825C58.5463 19.1825 59.0512 19.2678 59.5498 19.4382C60.0484 19.6087 60.5022 19.8857 60.9113 20.2692C61.3204 20.6485 61.6464 21.1513 61.8893 21.7777C62.1322 22.4041 62.2537 23.1754 62.2537 24.0916V24.7308H54.6855V23.4269H60.7196C60.7196 22.8729 60.6088 22.3786 60.3872 21.9439C60.1699 21.5093 59.8588 21.1662 59.4539 20.9148C59.0534 20.6634 58.5804 20.5377 58.0349 20.5377C57.4341 20.5377 56.9142 20.6868 56.4753 20.9851C56.0406 21.2791 55.7061 21.6627 55.4717 22.1357C55.2373 22.6087 55.1201 23.1158 55.1201 23.657V24.5263C55.1201 25.2678 55.248 25.8963 55.5037 26.412C55.7636 26.9233 56.1237 27.3132 56.5839 27.5817C57.0441 27.8459 57.5789 27.978 58.1883 27.978C58.5846 27.978 58.9426 27.9226 59.2622 27.8118C59.586 27.6968 59.8652 27.5263 60.0995 27.3004C60.3339 27.0703 60.515 26.7848 60.6429 26.4439L62.1003 26.853C61.9468 27.3473 61.689 27.782 61.3268 28.157C60.9646 28.5277 60.5172 28.8175 59.9845 29.0263C59.4518 29.2308 58.8531 29.3331 58.1883 29.3331Z\" fill=\"#232323\"/>\n    <path d=\"M67.0431 28.794C66.8854 28.794 66.7501 28.7375 66.6372 28.6246C66.5243 28.5117 66.4678 28.3764 66.4678 28.2187C66.4678 28.061 66.5243 27.9257 66.6372 27.8128C66.7501 27.6999 66.8854 27.6434 67.0431 27.6434C67.2008 27.6434 67.3361 27.6999 67.449 27.8128C67.5619 27.9257 67.6184 28.061 67.6184 28.2187C67.6184 28.3231 67.5917 28.419 67.5385 28.5064C67.4873 28.5937 67.4181 28.664 67.3307 28.7173C67.2455 28.7684 67.1496 28.794 67.0431 28.794ZM67.0431 25.1505C66.8854 25.1505 66.7501 25.0941 66.6372 24.9811C66.5243 24.8682 66.4678 24.7329 66.4678 24.5752C66.4678 24.4176 66.5243 24.2823 66.6372 24.1694C66.7501 24.0564 66.8854 24 67.0431 24C67.2008 24 67.3361 24.0564 67.449 24.1694C67.5619 24.2823 67.6184 24.4176 67.6184 24.5752C67.6184 24.6796 67.5917 24.7755 67.5385 24.8629C67.4873 24.9502 67.4181 25.0206 67.3307 25.0738C67.2455 25.125 67.1496 25.1505 67.0431 25.1505ZM73.3568 28.8451C72.9477 28.8451 72.5866 28.7418 72.2734 28.5351C71.9602 28.3263 71.7151 28.0323 71.5383 27.653C71.3615 27.2716 71.273 26.821 71.273 26.3011C71.273 25.7855 71.3615 25.338 71.5383 24.9588C71.7151 24.5795 71.9612 24.2865 72.2766 24.0799C72.5919 23.8732 72.9563 23.7698 73.3696 23.7698C73.6892 23.7698 73.9417 23.8231 74.1271 23.9296C74.3146 24.0341 74.4573 24.1534 74.5553 24.2876C74.6555 24.4197 74.7333 24.5284 74.7887 24.6136H74.8526V22.1974H75.6068V28.7429H74.8781V27.9886H74.7887C74.7333 28.0781 74.6544 28.191 74.5522 28.3274C74.4499 28.4616 74.3039 28.582 74.1143 28.6885C73.9247 28.7929 73.6722 28.8451 73.3568 28.8451ZM73.4591 28.1676C73.7617 28.1676 74.0174 28.0887 74.2262 27.9311C74.435 27.7713 74.5937 27.5507 74.7024 27.2695C74.811 26.9861 74.8654 26.6591 74.8654 26.2883C74.8654 25.9218 74.8121 25.6012 74.7056 25.3263C74.599 25.0493 74.4414 24.8341 74.2325 24.6807C74.0237 24.5252 73.7659 24.4474 73.4591 24.4474C73.1395 24.4474 72.8732 24.5294 72.6601 24.6935C72.4492 24.8554 72.2904 25.076 72.1839 25.3551C72.0795 25.6321 72.0273 25.9431 72.0273 26.2883C72.0273 26.6377 72.0806 26.9552 72.1871 27.2407C72.2958 27.5241 72.4556 27.75 72.6665 27.9183C72.8796 28.0845 73.1438 28.1676 73.4591 28.1676ZM79.1512 28.8451C78.6782 28.8451 78.2702 28.7407 77.9272 28.5319C77.5862 28.321 77.3231 28.0269 77.1377 27.6498C76.9545 27.2706 76.8629 26.8295 76.8629 26.3267C76.8629 25.8238 76.9545 25.3806 77.1377 24.9971C77.3231 24.6115 77.5809 24.311 77.9112 24.0958C78.2436 23.8785 78.6313 23.7698 79.0745 23.7698C79.3302 23.7698 79.5827 23.8125 79.832 23.8977C80.0813 23.9829 80.3082 24.1214 80.5127 24.3132C80.7173 24.5028 80.8803 24.7542 81.0017 25.0674C81.1232 25.3806 81.1839 25.7663 81.1839 26.2244V26.544H77.3998V25.892H80.4169C80.4169 25.615 80.3615 25.3679 80.2507 25.1505C80.142 24.9332 79.9865 24.7617 79.784 24.636C79.5838 24.5103 79.3473 24.4474 79.0745 24.4474C78.7741 24.4474 78.5142 24.522 78.2947 24.6711C78.0774 24.8181 77.9101 25.0099 77.7929 25.2464C77.6757 25.4829 77.6171 25.7365 77.6171 26.0071V26.4417C77.6171 26.8125 77.6811 27.1267 77.8089 27.3845C77.9389 27.6402 78.1189 27.8352 78.349 27.9694C78.5791 28.1015 78.8465 28.1676 79.1512 28.1676C79.3494 28.1676 79.5284 28.1399 79.6882 28.0845C79.8501 28.0269 79.9897 27.9417 80.1068 27.8288C80.224 27.7137 80.3146 27.571 80.3785 27.4005L81.1072 27.6051C81.0305 27.8522 80.9016 28.0696 80.7205 28.2571C80.5394 28.4424 80.3156 28.5873 80.0493 28.6917C79.783 28.794 79.4836 28.8451 79.1512 28.8451ZM84.3256 28.8451C83.8654 28.8451 83.4691 28.7365 83.1367 28.5191C82.8043 28.3018 82.5486 28.0024 82.3696 27.6211C82.1906 27.2397 82.1012 26.8039 82.1012 26.3139C82.1012 25.8153 82.1928 25.3753 82.376 24.9939C82.5614 24.6104 82.8192 24.311 83.1495 24.0958C83.4818 23.8785 83.8696 23.7698 84.3128 23.7698C84.658 23.7698 84.9691 23.8338 85.246 23.9616C85.523 24.0894 85.75 24.2684 85.9268 24.4985C86.1036 24.7287 86.2134 24.9971 86.256 25.3039H85.5017C85.4442 25.0802 85.3164 24.8821 85.1182 24.7095C84.9222 24.5348 84.658 24.4474 84.3256 24.4474C84.0316 24.4474 83.7737 24.5241 83.5522 24.6775C83.3327 24.8288 83.1612 25.0429 83.0376 25.3199C82.9161 25.5948 82.8554 25.9176 82.8554 26.2883C82.8554 26.6676 82.9151 26.9978 83.0344 27.2791C83.1558 27.5603 83.3263 27.7787 83.5458 27.9343C83.7674 28.0898 84.0273 28.1676 84.3256 28.1676C84.5216 28.1676 84.6995 28.1335 84.8593 28.0653C85.0191 27.9971 85.1544 27.8991 85.2652 27.7713C85.376 27.6434 85.4549 27.49 85.5017 27.311H86.256C86.2134 27.6008 86.1079 27.8618 85.9396 28.0941C85.7734 28.3242 85.5529 28.5074 85.278 28.6438C85.0053 28.778 84.6878 28.8451 84.3256 28.8451ZM89.4169 28.8451C88.9438 28.8451 88.5358 28.7407 88.1928 28.5319C87.8519 28.321 87.5887 28.0269 87.4034 27.6498C87.2201 27.2706 87.1285 26.8295 87.1285 26.3267C87.1285 25.8238 87.2201 25.3806 87.4034 24.9971C87.5887 24.6115 87.8465 24.311 88.1768 24.0958C88.5092 23.8785 88.897 23.7698 89.3401 23.7698C89.5958 23.7698 89.8483 23.8125 90.0976 23.8977C90.3469 23.9829 90.5738 24.1214 90.7784 24.3132C90.9829 24.5028 91.1459 24.7542 91.2674 25.0674C91.3888 25.3806 91.4495 25.7663 91.4495 26.2244V26.544H87.6654V25.892H90.6825C90.6825 25.615 90.6271 25.3679 90.5163 25.1505C90.4076 24.9332 90.2521 24.7617 90.0497 24.636C89.8494 24.5103 89.6129 24.4474 89.3401 24.4474C89.0397 24.4474 88.7798 24.522 88.5603 24.6711C88.343 24.8181 88.1757 25.0099 88.0585 25.2464C87.9414 25.4829 87.8828 25.7365 87.8828 26.0071V26.4417C87.8828 26.8125 87.9467 27.1267 88.0745 27.3845C88.2045 27.6402 88.3845 27.8352 88.6147 27.9694C88.8448 28.1015 89.1122 28.1676 89.4169 28.1676C89.615 28.1676 89.794 28.1399 89.9538 28.0845C90.1157 28.0269 90.2553 27.9417 90.3725 27.8288C90.4897 27.7137 90.5802 27.571 90.6441 27.4005L91.3728 27.6051C91.2961 27.8522 91.1672 28.0696 90.9861 28.2571C90.805 28.4424 90.5813 28.5873 90.3149 28.6917C90.0486 28.794 89.7492 28.8451 89.4169 28.8451ZM93.3512 25.7897V28.7429H92.5969V23.8338H93.3256V24.6008H93.3895C93.5046 24.3515 93.6793 24.1512 93.9137 24C94.148 23.8466 94.4506 23.7698 94.8213 23.7698C95.1537 23.7698 95.4446 23.838 95.6938 23.9744C95.9431 24.1086 96.137 24.3132 96.2755 24.588C96.414 24.8608 96.4833 25.2059 96.4833 25.6235V28.7429H95.729V25.6747C95.729 25.289 95.6289 24.9886 95.4286 24.7734C95.2283 24.5561 94.9534 24.4474 94.604 24.4474C94.3632 24.4474 94.148 24.4996 93.9584 24.604C93.7709 24.7084 93.6228 24.8608 93.5142 25.061C93.4055 25.2613 93.3512 25.5042 93.3512 25.7897ZM99.9965 23.8338V24.473H97.4525V23.8338H99.9965ZM98.1939 22.6576H98.9482V27.3366C98.9482 27.5497 98.9791 27.7095 99.0409 27.816C99.1048 27.9204 99.1858 27.9907 99.2838 28.0269C99.3839 28.061 99.4894 28.0781 99.6002 28.0781C99.6833 28.0781 99.7515 28.0738 99.8047 28.0653C99.858 28.0546 99.9006 28.0461 99.9326 28.0397L100.086 28.7173C100.035 28.7365 99.9635 28.7556 99.8718 28.7748C99.7802 28.7961 99.6641 28.8068 99.5235 28.8068C99.3104 28.8068 99.1016 28.761 98.8971 28.6694C98.6946 28.5777 98.5263 28.4382 98.3921 28.2507C98.26 28.0632 98.1939 27.8267 98.1939 27.5412V22.6576ZM101.131 28.7429V23.8338H101.86V24.5752H101.911C102 24.3323 102.162 24.1353 102.397 23.984C102.631 23.8327 102.895 23.7571 103.189 23.7571C103.245 23.7571 103.314 23.7581 103.397 23.7603C103.48 23.7624 103.543 23.7656 103.586 23.7698V24.5369C103.56 24.5305 103.501 24.5209 103.41 24.5081C103.32 24.4932 103.226 24.4858 103.125 24.4858C102.887 24.4858 102.674 24.5358 102.486 24.636C102.301 24.734 102.154 24.8703 102.045 25.0451C101.939 25.2176 101.885 25.4147 101.885 25.6363V28.7429H101.131ZM105.924 28.8579C105.613 28.8579 105.331 28.7993 105.077 28.6821C104.824 28.5628 104.622 28.3913 104.473 28.1676C104.324 27.9417 104.25 27.669 104.25 27.3494C104.25 27.0681 104.305 26.8402 104.416 26.6654C104.527 26.4886 104.675 26.3501 104.86 26.25C105.045 26.1498 105.25 26.0752 105.474 26.0262C105.7 25.9751 105.926 25.9346 106.154 25.9048C106.453 25.8664 106.695 25.8377 106.88 25.8185C107.067 25.7972 107.204 25.762 107.289 25.713C107.376 25.664 107.42 25.5788 107.42 25.4573V25.4318C107.42 25.1164 107.334 24.8714 107.161 24.6967C106.991 24.522 106.732 24.4346 106.385 24.4346C106.024 24.4346 105.742 24.5135 105.538 24.6711C105.333 24.8288 105.189 24.9971 105.106 25.1761L104.39 24.9204C104.518 24.6221 104.689 24.3899 104.902 24.2237C105.117 24.0554 105.351 23.9382 105.605 23.8721C105.86 23.8039 106.112 23.7698 106.359 23.7698C106.517 23.7698 106.698 23.789 106.902 23.8274C107.109 23.8636 107.308 23.9392 107.5 24.0543C107.694 24.1694 107.855 24.343 107.983 24.5752C108.11 24.8075 108.174 25.1186 108.174 25.5085V28.7429H107.42V28.0781H107.382C107.331 28.1846 107.245 28.2986 107.126 28.4201C107.007 28.5415 106.848 28.6448 106.65 28.7301C106.452 28.8153 106.21 28.8579 105.924 28.8579ZM106.039 28.1804C106.338 28.1804 106.589 28.1218 106.794 28.0046C107 27.8874 107.156 27.7361 107.26 27.5507C107.367 27.3654 107.42 27.1704 107.42 26.9659V26.2755C107.388 26.3139 107.318 26.349 107.209 26.381C107.103 26.4108 106.979 26.4375 106.838 26.4609C106.7 26.4822 106.565 26.5014 106.432 26.5184C106.303 26.5333 106.197 26.5461 106.116 26.5568C105.92 26.5823 105.737 26.6239 105.566 26.6814C105.398 26.7368 105.262 26.821 105.157 26.9339C105.055 27.0447 105.004 27.196 105.004 27.3877C105.004 27.6498 105.101 27.848 105.295 27.9822C105.491 28.1143 105.739 28.1804 106.039 28.1804ZM110.305 22.1974V28.7429H109.551V22.1974H110.305ZM111.687 28.7429V23.8338H112.441V28.7429H111.687ZM112.07 23.0156C111.923 23.0156 111.796 22.9655 111.69 22.8654C111.586 22.7652 111.533 22.6448 111.533 22.5042C111.533 22.3636 111.586 22.2432 111.69 22.1431C111.796 22.0429 111.923 21.9929 112.07 21.9929C112.217 21.9929 112.343 22.0429 112.447 22.1431C112.554 22.2432 112.607 22.3636 112.607 22.5042C112.607 22.6448 112.554 22.7652 112.447 22.8654C112.343 22.9655 112.217 23.0156 112.07 23.0156ZM113.682 28.7429V28.1676L116.469 24.588V24.5369H113.771V23.8338H117.44V24.4346L114.73 27.9886V28.0397H117.53V28.7429H113.682ZM120.609 28.8451C120.136 28.8451 119.728 28.7407 119.385 28.5319C119.044 28.321 118.781 28.0269 118.596 27.6498C118.413 27.2706 118.321 26.8295 118.321 26.3267C118.321 25.8238 118.413 25.3806 118.596 24.9971C118.781 24.6115 119.039 24.311 119.369 24.0958C119.702 23.8785 120.089 23.7698 120.533 23.7698C120.788 23.7698 121.041 23.8125 121.29 23.8977C121.539 23.9829 121.766 24.1214 121.971 24.3132C122.175 24.5028 122.338 24.7542 122.46 25.0674C122.581 25.3806 122.642 25.7663 122.642 26.2244V26.544H118.858V25.892H121.875C121.875 25.615 121.819 25.3679 121.709 25.1505C121.6 24.9332 121.444 24.7617 121.242 24.636C121.042 24.5103 120.805 24.4474 120.533 24.4474C120.232 24.4474 119.972 24.522 119.753 24.6711C119.535 24.8181 119.368 25.0099 119.251 25.2464C119.134 25.4829 119.075 25.7365 119.075 26.0071V26.4417C119.075 26.8125 119.139 27.1267 119.267 27.3845C119.397 27.6402 119.577 27.8352 119.807 27.9694C120.037 28.1015 120.305 28.1676 120.609 28.1676C120.807 28.1676 120.986 28.1399 121.146 28.0845C121.308 28.0269 121.448 27.9417 121.565 27.8288C121.682 27.7137 121.773 27.571 121.837 27.4005L122.565 27.6051C122.488 27.8522 122.36 28.0696 122.178 28.2571C121.997 28.4424 121.774 28.5873 121.507 28.6917C121.241 28.794 120.942 28.8451 120.609 28.8451ZM125.643 28.8451C125.234 28.8451 124.873 28.7418 124.56 28.5351C124.246 28.3263 124.001 28.0323 123.824 27.653C123.648 27.2716 123.559 26.821 123.559 26.3011C123.559 25.7855 123.648 25.338 123.824 24.9588C124.001 24.5795 124.247 24.2865 124.563 24.0799C124.878 23.8732 125.242 23.7698 125.656 23.7698C125.975 23.7698 126.228 23.8231 126.413 23.9296C126.601 24.0341 126.743 24.1534 126.841 24.2876C126.942 24.4197 127.019 24.5284 127.075 24.6136H127.139V22.1974H127.893V28.7429H127.164V27.9886H127.075C127.019 28.0781 126.941 28.191 126.838 28.3274C126.736 28.4616 126.59 28.582 126.4 28.6885C126.211 28.7929 125.958 28.8451 125.643 28.8451ZM125.745 28.1676C126.048 28.1676 126.303 28.0887 126.512 27.9311C126.721 27.7713 126.88 27.5507 126.988 27.2695C127.097 26.9861 127.151 26.6591 127.151 26.2883C127.151 25.9218 127.098 25.6012 126.992 25.3263C126.885 25.0493 126.727 24.8341 126.519 24.6807C126.31 24.5252 126.052 24.4474 125.745 24.4474C125.426 24.4474 125.159 24.5294 124.946 24.6935C124.735 24.8554 124.577 25.076 124.47 25.3551C124.366 25.6321 124.313 25.9431 124.313 26.2883C124.313 26.6377 124.367 26.9552 124.473 27.2407C124.582 27.5241 124.742 27.75 124.953 27.9183C125.166 28.0845 125.43 28.1676 125.745 28.1676ZM135.925 23.8338L134.109 28.7429H133.342L131.527 23.8338H132.345L133.7 27.7457H133.751L135.106 23.8338H135.925ZM138.739 28.8451C138.295 28.8451 137.907 28.7397 137.572 28.5287C137.24 28.3178 136.98 28.0227 136.792 27.6434C136.607 27.2642 136.514 26.821 136.514 26.3139C136.514 25.8025 136.607 25.3561 136.792 24.9747C136.98 24.5934 137.24 24.2972 137.572 24.0863C137.907 23.8753 138.295 23.7698 138.739 23.7698C139.182 23.7698 139.57 23.8753 139.902 24.0863C140.237 24.2972 140.496 24.5934 140.682 24.9747C140.869 25.3561 140.963 25.8025 140.963 26.3139C140.963 26.821 140.869 27.2642 140.682 27.6434C140.496 28.0227 140.237 28.3178 139.902 28.5287C139.57 28.7397 139.182 28.8451 138.739 28.8451ZM138.739 28.1676C139.075 28.1676 139.352 28.0813 139.57 27.9087C139.787 27.7361 139.948 27.5092 140.052 27.2279C140.157 26.9467 140.209 26.642 140.209 26.3139C140.209 25.9858 140.157 25.68 140.052 25.3966C139.948 25.1132 139.787 24.8842 139.57 24.7095C139.352 24.5348 139.075 24.4474 138.739 24.4474C138.402 24.4474 138.125 24.5348 137.908 24.7095C137.69 24.8842 137.53 25.1132 137.425 25.3966C137.321 25.68 137.269 25.9858 137.269 26.3139C137.269 26.642 137.321 26.9467 137.425 27.2279C137.53 27.5092 137.69 27.7361 137.908 27.9087C138.125 28.0813 138.402 28.1676 138.739 28.1676ZM144.249 23.8338V24.473H141.705V23.8338H144.249ZM142.447 22.6576H143.201V27.3366C143.201 27.5497 143.232 27.7095 143.294 27.816C143.358 27.9204 143.439 27.9907 143.537 28.0269C143.637 28.061 143.742 28.0781 143.853 28.0781C143.936 28.0781 144.004 28.0738 144.058 28.0653C144.111 28.0546 144.154 28.0461 144.185 28.0397L144.339 28.7173C144.288 28.7365 144.216 28.7556 144.125 28.7748C144.033 28.7961 143.917 28.8068 143.776 28.8068C143.563 28.8068 143.355 28.761 143.15 28.6694C142.948 28.5777 142.779 28.4382 142.645 28.2507C142.513 28.0632 142.447 27.8267 142.447 27.5412V22.6576ZM145.384 28.7429V23.8338H146.138V28.7429H145.384ZM145.768 23.0156C145.621 23.0156 145.494 22.9655 145.387 22.8654C145.283 22.7652 145.231 22.6448 145.231 22.5042C145.231 22.3636 145.283 22.2432 145.387 22.1431C145.494 22.0429 145.621 21.9929 145.768 21.9929C145.915 21.9929 146.04 22.0429 146.145 22.1431C146.251 22.2432 146.304 22.3636 146.304 22.5042C146.304 22.6448 146.251 22.7652 146.145 22.8654C146.04 22.9655 145.915 23.0156 145.768 23.0156ZM148.274 25.7897V28.7429H147.52V23.8338H148.248V24.6008H148.312C148.427 24.3515 148.602 24.1512 148.837 24C149.071 23.8466 149.373 23.7698 149.744 23.7698C150.077 23.7698 150.367 23.838 150.617 23.9744C150.866 24.1086 151.06 24.3132 151.198 24.588C151.337 24.8608 151.406 25.2059 151.406 25.6235V28.7429H150.652V25.6747C150.652 25.289 150.552 24.9886 150.351 24.7734C150.151 24.5561 149.876 24.4474 149.527 24.4474C149.286 24.4474 149.071 24.4996 148.881 24.604C148.694 24.7084 148.546 24.8608 148.437 25.061C148.328 25.2613 148.274 25.5042 148.274 25.7897ZM154.766 30.686C154.402 30.686 154.088 30.6392 153.826 30.5454C153.564 30.4538 153.346 30.3323 153.171 30.1811C152.999 30.0319 152.861 29.8721 152.759 29.7017L153.36 29.2798C153.428 29.3693 153.514 29.4716 153.619 29.5866C153.723 29.7038 153.866 29.805 154.047 29.8902C154.23 29.9776 154.47 30.0213 154.766 30.0213C155.162 30.0213 155.489 29.9254 155.747 29.7336C156.005 29.5419 156.134 29.2414 156.134 28.8323V27.8352H156.07C156.015 27.9247 155.936 28.0355 155.833 28.1676C155.733 28.2975 155.588 28.4137 155.399 28.5159C155.211 28.6161 154.958 28.6662 154.638 28.6662C154.242 28.6662 153.886 28.5724 153.571 28.3849C153.257 28.1974 153.009 27.9247 152.826 27.5667C152.645 27.2088 152.554 26.7741 152.554 26.2627C152.554 25.7599 152.643 25.322 152.82 24.9492C152.996 24.5742 153.242 24.2844 153.558 24.0799C153.873 23.8732 154.238 23.7698 154.651 23.7698C154.97 23.7698 155.224 23.8231 155.412 23.9296C155.601 24.0341 155.746 24.1534 155.846 24.2876C155.948 24.4197 156.027 24.5284 156.083 24.6136H156.159V23.8338H156.888V28.8835C156.888 29.3054 156.792 29.6484 156.6 29.9126C156.411 30.1789 156.155 30.3739 155.833 30.4975C155.514 30.6232 155.158 30.686 154.766 30.686ZM154.74 27.9886C155.043 27.9886 155.299 27.9194 155.507 27.7809C155.716 27.6424 155.875 27.4431 155.984 27.1832C156.092 26.9233 156.147 26.6122 156.147 26.25C156.147 25.8963 156.093 25.5841 155.987 25.3135C155.88 25.0429 155.723 24.8309 155.514 24.6775C155.305 24.5241 155.047 24.4474 154.74 24.4474C154.421 24.4474 154.154 24.5284 153.941 24.6903C153.73 24.8522 153.572 25.0696 153.465 25.3423C153.361 25.615 153.309 25.9176 153.309 26.25C153.309 26.5909 153.362 26.8924 153.468 27.1544C153.577 27.4144 153.737 27.6189 153.948 27.7681C154.161 27.9151 154.425 27.9886 154.74 27.9886ZM162.794 28.8451C162.334 28.8451 161.938 28.7365 161.605 28.5191C161.273 28.3018 161.017 28.0024 160.838 27.6211C160.659 27.2397 160.57 26.8039 160.57 26.3139C160.57 25.8153 160.662 25.3753 160.845 24.9939C161.03 24.6104 161.288 24.311 161.618 24.0958C161.951 23.8785 162.338 23.7698 162.782 23.7698C163.127 23.7698 163.438 23.8338 163.715 23.9616C163.992 24.0894 164.219 24.2684 164.396 24.4985C164.572 24.7287 164.682 24.9971 164.725 25.3039H163.97C163.913 25.0802 163.785 24.8821 163.587 24.7095C163.391 24.5348 163.127 24.4474 162.794 24.4474C162.5 24.4474 162.242 24.5241 162.021 24.6775C161.801 24.8288 161.63 25.0429 161.506 25.3199C161.385 25.5948 161.324 25.9176 161.324 26.2883C161.324 26.6676 161.384 26.9978 161.503 27.2791C161.625 27.5603 161.795 27.7787 162.015 27.9343C162.236 28.0898 162.496 28.1676 162.794 28.1676C162.99 28.1676 163.168 28.1335 163.328 28.0653C163.488 27.9971 163.623 27.8991 163.734 27.7713C163.845 27.6434 163.924 27.49 163.97 27.311H164.725C164.682 27.6008 164.577 27.8618 164.408 28.0941C164.242 28.3242 164.022 28.5074 163.747 28.6438C163.474 28.778 163.157 28.8451 162.794 28.8451ZM167.822 28.8451C167.379 28.8451 166.99 28.7397 166.655 28.5287C166.323 28.3178 166.063 28.0227 165.875 27.6434C165.69 27.2642 165.597 26.821 165.597 26.3139C165.597 25.8025 165.69 25.3561 165.875 24.9747C166.063 24.5934 166.323 24.2972 166.655 24.0863C166.99 23.8753 167.379 23.7698 167.822 23.7698C168.265 23.7698 168.653 23.8753 168.985 24.0863C169.32 24.2972 169.579 24.5934 169.765 24.9747C169.952 25.3561 170.046 25.8025 170.046 26.3139C170.046 26.821 169.952 27.2642 169.765 27.6434C169.579 28.0227 169.32 28.3178 168.985 28.5287C168.653 28.7397 168.265 28.8451 167.822 28.8451ZM167.822 28.1676C168.158 28.1676 168.435 28.0813 168.653 27.9087C168.87 27.7361 169.031 27.5092 169.135 27.2279C169.24 26.9467 169.292 26.642 169.292 26.3139C169.292 25.9858 169.24 25.68 169.135 25.3966C169.031 25.1132 168.87 24.8842 168.653 24.7095C168.435 24.5348 168.158 24.4474 167.822 24.4474C167.485 24.4474 167.208 24.5348 166.991 24.7095C166.773 24.8842 166.613 25.1132 166.508 25.3966C166.404 25.68 166.352 25.9858 166.352 26.3139C166.352 26.642 166.404 26.9467 166.508 27.2279C166.613 27.5092 166.773 27.7361 166.991 27.9087C167.208 28.0813 167.485 28.1676 167.822 28.1676ZM171.952 25.7897V28.7429H171.197V23.8338H171.926V24.6008H171.99C172.105 24.3515 172.28 24.1512 172.514 24C172.749 23.8466 173.051 23.7698 173.422 23.7698C173.754 23.7698 174.045 23.838 174.294 23.9744C174.544 24.1086 174.738 24.3132 174.876 24.588C175.015 24.8608 175.084 25.2059 175.084 25.6235V28.7429H174.33V25.6747C174.33 25.289 174.229 24.9886 174.029 24.7734C173.829 24.5561 173.554 24.4474 173.205 24.4474C172.964 24.4474 172.749 24.4996 172.559 24.604C172.371 24.7084 172.223 24.8608 172.115 25.061C172.006 25.2613 171.952 25.5042 171.952 25.7897ZM178.597 23.8338V24.473H176.053V23.8338H178.597ZM176.795 22.6576H177.549V27.3366C177.549 27.5497 177.58 27.7095 177.641 27.816C177.705 27.9204 177.786 27.9907 177.884 28.0269C177.985 28.061 178.09 28.0781 178.201 28.0781C178.284 28.0781 178.352 28.0738 178.405 28.0653C178.459 28.0546 178.501 28.0461 178.533 28.0397L178.687 28.7173C178.635 28.7365 178.564 28.7556 178.472 28.7748C178.381 28.7961 178.265 28.8068 178.124 28.8068C177.911 28.8068 177.702 28.761 177.498 28.6694C177.295 28.5777 177.127 28.4382 176.993 28.2507C176.861 28.0632 176.795 27.8267 176.795 27.5412V22.6576ZM179.732 28.7429V23.8338H180.46V24.5752H180.511C180.601 24.3323 180.763 24.1353 180.997 23.984C181.232 23.8327 181.496 23.7571 181.79 23.7571C181.845 23.7571 181.915 23.7581 181.998 23.7603C182.081 23.7624 182.144 23.7656 182.186 23.7698V24.5369C182.161 24.5305 182.102 24.5209 182.01 24.5081C181.921 24.4932 181.826 24.4858 181.726 24.4858C181.487 24.4858 181.274 24.5358 181.087 24.636C180.901 24.734 180.754 24.8703 180.646 25.0451C180.539 25.2176 180.486 25.4147 180.486 25.6363V28.7429H179.732ZM184.525 28.8579C184.214 28.8579 183.932 28.7993 183.678 28.6821C183.424 28.5628 183.223 28.3913 183.074 28.1676C182.925 27.9417 182.85 27.669 182.85 27.3494C182.85 27.0681 182.906 26.8402 183.016 26.6654C183.127 26.4886 183.275 26.3501 183.461 26.25C183.646 26.1498 183.851 26.0752 184.074 26.0262C184.3 25.9751 184.527 25.9346 184.755 25.9048C185.053 25.8664 185.295 25.8377 185.481 25.8185C185.668 25.7972 185.804 25.762 185.89 25.713C185.977 25.664 186.021 25.5788 186.021 25.4573V25.4318C186.021 25.1164 185.934 24.8714 185.762 24.6967C185.591 24.522 185.332 24.4346 184.985 24.4346C184.625 24.4346 184.343 24.5135 184.138 24.6711C183.934 24.8288 183.79 24.9971 183.707 25.1761L182.991 24.9204C183.119 24.6221 183.289 24.3899 183.502 24.2237C183.717 24.0554 183.952 23.9382 184.205 23.8721C184.461 23.8039 184.712 23.7698 184.96 23.7698C185.117 23.7698 185.298 23.789 185.503 23.8274C185.71 23.8636 185.909 23.9392 186.101 24.0543C186.294 24.1694 186.455 24.343 186.583 24.5752C186.711 24.8075 186.775 25.1186 186.775 25.5085V28.7429H186.021V28.0781H185.982C185.931 28.1846 185.846 28.2986 185.727 28.4201C185.607 28.5415 185.449 28.6448 185.25 28.7301C185.052 28.8153 184.81 28.8579 184.525 28.8579ZM184.64 28.1804C184.938 28.1804 185.19 28.1218 185.394 28.0046C185.601 27.8874 185.756 27.7361 185.861 27.5507C185.967 27.3654 186.021 27.1704 186.021 26.9659V26.2755C185.989 26.3139 185.918 26.349 185.81 26.381C185.703 26.4108 185.58 26.4375 185.439 26.4609C185.3 26.4822 185.165 26.5014 185.033 26.5184C184.903 26.5333 184.798 26.5461 184.717 26.5568C184.521 26.5823 184.337 26.6239 184.167 26.6814C183.999 26.7368 183.862 26.821 183.758 26.9339C183.656 27.0447 183.604 27.196 183.604 27.3877C183.604 27.6498 183.701 27.848 183.895 27.9822C184.091 28.1143 184.34 28.1804 184.64 28.1804ZM190.146 28.8451C189.686 28.8451 189.289 28.7365 188.957 28.5191C188.625 28.3018 188.369 28.0024 188.19 27.6211C188.011 27.2397 187.921 26.8039 187.921 26.3139C187.921 25.8153 188.013 25.3753 188.196 24.9939C188.382 24.6104 188.64 24.311 188.97 24.0958C189.302 23.8785 189.69 23.7698 190.133 23.7698C190.478 23.7698 190.789 23.8338 191.066 23.9616C191.343 24.0894 191.57 24.2684 191.747 24.4985C191.924 24.7287 192.034 24.9971 192.076 25.3039H191.322C191.265 25.0802 191.137 24.8821 190.939 24.7095C190.742 24.5348 190.478 24.4474 190.146 24.4474C189.852 24.4474 189.594 24.5241 189.372 24.6775C189.153 24.8288 188.981 25.0429 188.858 25.3199C188.736 25.5948 188.676 25.9176 188.676 26.2883C188.676 26.6676 188.735 26.9978 188.855 27.2791C188.976 27.5603 189.147 27.7787 189.366 27.9343C189.588 28.0898 189.848 28.1676 190.146 28.1676C190.342 28.1676 190.52 28.1335 190.68 28.0653C190.839 27.9971 190.975 27.8991 191.086 27.7713C191.196 27.6434 191.275 27.49 191.322 27.311H192.076C192.034 27.6008 191.928 27.8618 191.76 28.0941C191.594 28.3242 191.373 28.5074 191.098 28.6438C190.826 28.778 190.508 28.8451 190.146 28.8451ZM195.314 23.8338V24.473H192.77V23.8338H195.314ZM193.511 22.6576H194.266V27.3366C194.266 27.5497 194.296 27.7095 194.358 27.816C194.422 27.9204 194.503 27.9907 194.601 28.0269C194.701 28.061 194.807 28.0781 194.918 28.0781C195.001 28.0781 195.069 28.0738 195.122 28.0653C195.175 28.0546 195.218 28.0461 195.25 28.0397L195.403 28.7173C195.352 28.7365 195.281 28.7556 195.189 28.7748C195.098 28.7961 194.981 28.8068 194.841 28.8068C194.628 28.8068 194.419 28.761 194.214 28.6694C194.012 28.5777 193.844 28.4382 193.709 28.2507C193.577 28.0632 193.511 27.8267 193.511 27.5412V22.6576ZM199.838 24.9332L199.16 25.125C199.118 25.012 199.055 24.9023 198.972 24.7958C198.891 24.6871 198.78 24.5976 198.639 24.5273C198.499 24.457 198.319 24.4218 198.099 24.4218C197.799 24.4218 197.548 24.4911 197.348 24.6296C197.15 24.7659 197.051 24.9396 197.051 25.1505C197.051 25.338 197.119 25.4861 197.255 25.5948C197.392 25.7034 197.605 25.794 197.895 25.8664L198.623 26.0454C199.062 26.1519 199.389 26.3149 199.605 26.5344C199.82 26.7517 199.927 27.0319 199.927 27.375C199.927 27.6562 199.846 27.9076 199.684 28.1292C199.525 28.3508 199.301 28.5255 199.013 28.6534C198.726 28.7812 198.391 28.8451 198.01 28.8451C197.509 28.8451 197.095 28.7365 196.766 28.5191C196.438 28.3018 196.231 27.9843 196.143 27.5667L196.859 27.3877C196.927 27.6519 197.056 27.8501 197.246 27.9822C197.438 28.1143 197.688 28.1804 197.997 28.1804C198.348 28.1804 198.628 28.1058 198.834 27.9566C199.043 27.8054 199.147 27.6243 199.147 27.4133C199.147 27.2429 199.088 27.1001 198.969 26.985C198.849 26.8679 198.666 26.7805 198.419 26.723L197.601 26.5312C197.151 26.4247 196.821 26.2595 196.61 26.0358C196.401 25.81 196.297 25.5277 196.297 25.1889C196.297 24.9119 196.374 24.6669 196.53 24.4538C196.688 24.2407 196.902 24.0735 197.172 23.952C197.445 23.8306 197.754 23.7698 198.099 23.7698C198.585 23.7698 198.966 23.8764 199.243 24.0894C199.522 24.3025 199.721 24.5838 199.838 24.9332Z\" fill=\"#232323\"/>\n    </svg>\n    );\n\n    return(\n        <div className=\"header \">\n            <div className=\"logo\">\n                {logo}\n            </div>\n            <div className=\"profileCard\">\n                <span>Bonjour {userAddress}</span>\n                <span>\n                    {isOwner \n                        ? 'Vous êtes Admin sur ce contrat.'\n                        :  ''\n                    } \n                    {isVoter\n                        ? ' Vous êtes autorisé à voter.'\n                        : \" Vous n'êtes pas autorisé à voter.\"\n                    }          \n                </span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import { IoIdCard, IoReceipt, IoFileTray, IoTrophy } from \"react-icons/io5\";\n\nfunction AppBtn ({type, show, currentState, isVoter}) {\n\n    const getText = () => {\n        let text = \"\";\n        switch(type) {\n            case \"voters\":\n                text=\"Liste des votants\";\n                return text;\n            case \"proposals\": \n                if(currentState < 1) {\n                    text=\"Les propositions ne sont pas disponibles\";\n                    return text;\n                }\n                if (!isVoter) {\n                    text=\"Vous n'êtes pas autorisé à voir les propositions\";\n                    return text;\n                }\n                text=\"Liste des propositions\";\n                return text;\n            case \"voting\": \n                if(currentState !== 3) {\n                    text=\"Les votes ne sont pas ouverts\";\n                    return text;\n                }\n                if (!isVoter) {\n                    text=\"Vous n'êtes pas autorisé à voir les votes\";\n                    return text;\n                }\n                text=\"Voter\";\n                return text;\n            case \"result\":\n                if(currentState !== 5) {\n                    return \"Les résultats ne sont pas encore disponibles\";\n                }\n                if (!isVoter) {\n                    text=\"Vous n'êtes pas autorisé à voir le résultat\";\n                    return text;\n                }\n                text=\"Voir la proposition gagnante\";\n                return text;\n            default: break;\n        }\n    }\n\n    const toggleVisibility = () => {\n        if(type === \"proposals\" && (currentState < 1 || !isVoter)){\n            return;\n        }\n        if(type === \"voting\" && (currentState !== 3 || !isVoter)) {\n            return;\n        }\n        if(type === \"result\" && (currentState !== 5 || !isVoter )) {\n            return;\n        }\n        show();\n    }\n\n    const getIcon = () => {\n        if(type === \"voters\"){\n            return (<IoIdCard />);\n        }\n        if(type === \"proposals\"){\n            return (<IoReceipt />);\n        }\n        if(type === \"voting\"){\n            return (<IoFileTray />);\n        }\n        if(type === \"result\"){\n            return (<IoTrophy />)\n        }\n    }\n\n    let className = \"appBtn enabled\";\n    if(currentState < 1 && type === \"proposals\") {\n        className = \"appBtn disabled\";\n    }\n\n    if(currentState !== 3 && type === \"voting\") {\n        className = \"appBtn disabled\";\n    }\n\n    if(currentState !== 5 && type === \"result\") {\n        className = \"appBtn disabled\";\n    }\n\n    return(\n        <div className={className} onClick={toggleVisibility}>\n            <div className=\"btnImg\">{getIcon()}</div>\n            <div className=\"btnText\">{getText()}</div>\n        </div>\n    );\n}\n\nexport default AppBtn;","import { useState } from \"react\";\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle\n  };\n};\n\nexport default useModal;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\nconst Modal = ({ isShowing, hide, title, ...props }) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <>\n          <div className=\"modal-overlay\">\n            <div className=\"modal-wrapper\">\n              <div className=\"modal\">\n                <div className=\"modal-header\">\n                  <h4>{title}</h4>\n                  <button\n                    type=\"button\"\n                    className=\"modal-close-button\"\n                    onClick={hide}\n                  >\n                    <span>&times;</span>\n                  </button>\n                </div>\n                <div className=\"modal-body\">{props.children}</div>\n              </div>\n            </div>\n          </div>\n        </>,\n        document.body\n      )\n    : null;\n\nModal.propTypes = {\n  isShowing: PropTypes.bool.isRequired,\n  hide: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default Modal;","import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction EventWatcher({currentState, changeState, addVoter, addToProposalList, addToVoteList, voters, setVoterStatus, votes, setVotedStatus}) {\n    const { state: { contract, accounts } } = useEth();\n    const [isInit, setIsInit] = useState(true);\n\n    // Refresh and store a list of all events at application's startup\n    const refreshEvents = async () => {\n        \n        // Watching the workflowState\n        let status = await contract.getPastEvents('WorkflowStatusChange', { fromBlock: 0, toBlock: 'latest' });\n        if (status.length > 0) {\n            let mostRecent = status[status.length-1].returnValues.newStatus;\n            if (parseInt(mostRecent) > currentState) {\n                nextStatus(mostRecent);\n            }\n        }        \n\n        const listVoter = await contract.getPastEvents('VoterRegistered', { fromBlock: 0, toBlock: 'latest' });\n        let formattedVoterList = listVoter.map((voter) => {\n            addVoter(voter.returnValues.voterAddress);\n            return voter.returnValues.voterAddress;\n        });\n        // Updating the voter status \n        let voterStatus = formattedVoterList.includes(accounts[0])\n        setVoterStatus(voterStatus);\n\n        // Next event can only be gathered if the user is a voter\n        if(voterStatus) {\n            const listProposal = await contract.getPastEvents('ProposalRegistered', { fromBlock: 0, toBlock: 'latest' });\n            listProposal.map(async (proposalId) => {\n                addProposal(proposalId);\n            });\n\n            const listVote = await contract.getPastEvents('Voted', { fromBlock: 0, toBlock: 'latest' });\n            listVote.map(async (vote) => {\n                addVote(vote, false);\n            });\n        }\n    }\n\n    const nextStatus = (statusNb) => {\n        changeState(parseInt(statusNb));\n    }\n\n    const addProposal = async (proposalId) => {\n        let proposal = await contract.methods.getOneProposal(proposalId.returnValues.proposalId).call({from: accounts[0]});\n        addToProposalList({'id':proposalId.returnValues.proposalId, 'description': proposal.description, 'voteCount': proposal.voteCount});\n    }\n\n    const addVote = async (vote, liveCount) => {\n        addToVoteList({'address':vote.returnValues.voter, 'proposalId': vote.returnValues.proposalId}, liveCount);\n        if(vote.returnValues.voter === accounts[0])\n        {\n            setVotedStatus(true);\n        }\n    }\n\n    useEffect(() => {\n        if(contract === null)\n        {\n            return;\n        }\n\n        // Initialisation de l'event watcher\n        if(isInit) {\n            setIsInit(false);\n\n            refreshEvents();\n\n            contract.events.WorkflowStatusChange()\n            .on('connected', (subscriptionId) => {\n                console.log('WorkflowStatusChange connected');\n            })\n            .on('data', (event) => {\n                nextStatus(event.returnValues.newStatus);\n            });\n    \n            contract.events.VoterRegistered()\n            .on('connected', (subscriptionId) => {\n                console.log('VoterRegistered connected');\n            })\n            .on('data', (event) => {\n                addVoter(event.returnValues.voterAddress);\n                setVoterStatus(event.returnValues.voterAddress === accounts[0])\n            });\n    \n            contract.events.ProposalRegistered()\n            .on('connected', (subscriptionId) => {\n                console.log('ProposalRegistered connected');\n            })\n            .on('data', async (event) => {\n                addProposal(event)\n            });\n\n            contract.events.Voted()\n            .on('connected', (subscriptionId) => {\n                console.log('Voted connected');\n            })\n            .on('data', (event) => {\n                addVote(event, true);\n            });\n            \n        }\n        // Updating the voter status \n        setVoterStatus(voters.includes(accounts[0]));\n\n    }, [contract, accounts, currentState]);\n}\n\nexport default EventWatcher;","import { useState } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction Vote ({votes, alreadyVoted, setVotedState, proposals}) {\n    const [voteInput, setVoteInput] = useState(0);\n    const { state: { contract, accounts } } = useEth();\n\n    const handleVoteChange = e => {\n        setVoteInput(e.target.value)\n    }\n\n    const sendVote = async () => {\n        await contract.methods.setVote(voteInput).send({from: accounts[0]});\n        setVotedState(true);\n    }\n\n    return (\n        <div>\n            {!alreadyVoted\n                ? <div className=\"voteInput\">\n                    <select name=\"proposition\" onChange={handleVoteChange}>\n                        {\n                            proposals.map((proposal, index) => {\n                                return(<option value={proposal.id} key={index}>{proposal.description}</option>)\n                            })\n                        }\n                    </select>\n                    <button onClick={sendVote}>\n                        Valider votre vote\n                    </button>\n                  </div>\n                : ''\n            }\n            \n            <div className=\"votesContainer\">\n                <table>\n                    <thead>\n                        <tr>\n                            <td>address</td>\n                            <td>proposition</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            votes.map((vote, index) => {\n                                return (<tr key={index}><td>{vote.address}</td><td>{vote.proposalId}</td></tr>);\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Vote;","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useEth } from \"../contexts/EthContext\";\n\nfunction Result ({currentState, proposals}) {\n    const [winnerId, setWinnerId] = useState(\"\");\n    const { state: { contract, accounts } } = useEth();\n\n    const updateWinnerId = async () => {\n        setWinnerId(await contract.methods.winningProposalID().call({from: accounts[0]}));\n    }\n\n    useEffect(()=>{\n        if (contract === null){\n            return;\n        }\n        updateWinnerId();\n    }, [contract, accounts]);\n\n    let blockquote = (<></>);\n    if(typeof proposals[winnerId] !== 'undefined'){\n        blockquote = (\n            <blockquote>\n                {proposals[winnerId].description}\n            </blockquote>\n        );\n        \n    }\n    return(\n        <div className=\"resultContainer\">\n            <div>\n                La proposition gagnante est la proposition n°{winnerId} :\n                {blockquote}\n            </div>\n        </div>\n    );\n}\n\nexport default Result;","import { EthProvider, useEth } from \"./contexts/EthContext\";\nimport Whitelist from \"./components/Whitelist\";\nimport \"./App.css\";\nimport Proposals from \"./components/Proposals\";\nimport Workflow from \"./components/Workflow\";\nimport { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport AppBtn from \"./components/AppBtn\";\nimport useModal from \"./components/hook/useModal\";\nimport Modal from \"./components/modal\";\nimport EventWatcher from \"./components/EventWatcher\";\nimport Vote from \"./components/Vote\";\nimport Result from \"./components/Result\";\nimport { useCallback } from \"react\";\n\nfunction App() {\n  const [workflowState, setWorkflowState] = useState(0);\n  const [isVoter, setIsVoter] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n  const [voterList, setVoterList] = useState([]);\n  const [proposalList, setProposalList] = useState([]);\n  const [voteList, setVoteList] = useState([]);\n  const {isShowing: isVoterListVisible, toggle: toggleVoterList} = useModal();\n  const {isShowing: areProposalsVisible, toggle: toggleProposals} = useModal();\n  const {isShowing: isVotingVisible, toggle: toggleVoting} = useModal();\n  const {isShowing: isResultVisible, toggle: toggleResult} = useModal();\n \n  const addNewVoter = useCallback((voter) => {\n    setVoterList(voterList => {\n      if(voterList.includes(voter)) {\n        return [...voterList];\n      }\n      return [...voterList, voter];\n    });\n  });\n\n  const calcIfVoter = (userAddress, newAdress) => {\n    if(!isVoter)\n    {\n      setIsVoter(userAddress === newAdress);\n    }\n  }\n\n  const addProposalToList = (proposal) => {\n    setProposalList(proposalList => {\n      for(let i = 0; i < proposalList.length; i++) {\n        if(proposalList[i].id === proposal.id) {\n          return [...proposalList];\n        }\n      }\n      return [...proposalList, proposal];\n    });\n  }\n\n  const addVoteToList = (vote) => {\n    // Updating the vote list\n    setVoteList(voteList => {      \n      for(let i = 0; i < voteList.length; i++) {\n        if(voteList[i].address === vote.address) {\n          return [...voteList];\n        }\n      }\n      return [...voteList, vote];\n    });\n  }\n\n  return (\n    <EthProvider>\n      <EventWatcher \n        currentState={workflowState}\n        changeState={setWorkflowState}\n        updateVoters={setVoterList}\n        addVoter={addNewVoter}\n        addToProposalList={addProposalToList}\n        addToVoteList={addVoteToList}\n        voters={voterList}\n        setVoterStatus={setIsVoter}\n        votes={voteList}\n        setVotedStatus={setHasVoted}\n      />\n      <div id=\"App\" >\n        <div className=\"container\">\n          <Header isVoter={isVoter} voters={voterList} setVoterStatus={setIsVoter}/>\n          <Workflow currentState={workflowState}/>\n          <div className=\"btnWrapper\">\n            <AppBtn type=\"voters\" show={toggleVoterList} currentState={workflowState} isVoter={isVoter}/>\n            <AppBtn type=\"proposals\" show={toggleProposals} currentState={workflowState} isVoter={isVoter}/>\n            <AppBtn type=\"voting\" show={toggleVoting} currentState={workflowState} isVoter={isVoter}/>\n            <AppBtn type=\"result\" show={toggleResult} currentState={workflowState} isVoter={isVoter}/>\n\n            <Modal isShowing={isVoterListVisible} hide={toggleVoterList} title=\"Liste des votants\">\n              <Whitelist currentState={workflowState} voters={voterList} checkVoterState={calcIfVoter}/>\n            </Modal>\n            <Modal isShowing={areProposalsVisible} hide={toggleProposals} title=\"Liste des propositions\">\n              <Proposals currentState={workflowState} proposals={proposalList}/>\n            </Modal>\n            <Modal isShowing={isVotingVisible} hide={toggleVoting} title=\"Voter\">\n              <Vote votes={voteList} alreadyVoted={hasVoted} setVotedState={setHasVoted} proposals={proposalList}/>\n            </Modal>\n            <Modal isShowing={isResultVisible} hide={toggleResult} title=\"Resultat\">\n              <Result currentState={workflowState} proposals={proposalList} />\n            </Modal>\n          </div>\n        </div>\n      </div>\n    </EthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}